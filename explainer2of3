{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "#imports\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.api as sm\n",
    "from sklearn import preprocessing\n",
    "from bokeh.io import output_file, show, output_notebook\n",
    "from bokeh.models import ColumnDataSource, HoverTool\n",
    "from bokeh.models import Whisker\n",
    "from bokeh.models import Span\n",
    "from bokeh.models import Legend\n",
    "from bokeh.plotting import figure, show\n",
    "from bokeh.plotting import output_file\n",
    "from bokeh.palettes import viridis\n",
    "from bokeh.palettes import Spectral6\n",
    "from bokeh.models import Panel, Tabs\n",
    "from bokeh.embed import file_html\n",
    "from bokeh.resources import CDN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Loading the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('BerigelseKBH.csv') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Idea:\n",
    "\n",
    "We want to test our belief that share of foreign students actually doesn't explain the quality of the school, if one is to account for more variables than just share of foreign students. Furthermore, we would like to show the result of this test, in a visual way, to our reader. So we run three regression models, and extract the coefficients and confidence intervals for share of foreign student from each model.<br>\n",
    "<br>\n",
    "The first regression model looks at the bivariate relation between share of foreign and school quality.<br>\n",
    "The second regression model adds variables on the institution level, that is information about the school. <br>\n",
    "The third regression model adds variables regarding the socio-economic conditions in the school district. <br>\n",
    "<br>\n",
    "The coefficients of share of foreign students are then plotted together from all three models along with whiskers that indicate the 95-pct. confidence intervals. We hope (and anticipate) that the coefficient will go from being negative and significant to being insignificant. This will show the reader that it is an oversimplification just to look at share of foreign students and school performance, and then infer that schools with higher shares of  student from foreign background perform worse.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3 regression models\n",
    "### Model 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>            <td>y</td>        <th>  R-squared:         </th> <td>   0.246</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.229</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   14.05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 13 May 2020</td> <th>  Prob (F-statistic):</th> <td>0.000526</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:44:26</td>     <th>  Log-Likelihood:    </th> <td> -75.884</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    45</td>      <th>  AIC:               </th> <td>   155.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    43</td>      <th>  BIC:               </th> <td>   159.4</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>         <td>    4.8535</td> <td>    0.199</td> <td>   24.360</td> <td> 0.000</td> <td>    4.452</td> <td>    5.255</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Share foreign</th> <td>   -0.7469</td> <td>    0.199</td> <td>   -3.749</td> <td> 0.001</td> <td>   -1.149</td> <td>   -0.345</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 4.151</td> <th>  Durbin-Watson:     </th> <td>   1.921</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.126</td> <th>  Jarque-Bera (JB):  </th> <td>   4.147</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.128</td> <th>  Prob(JB):          </th> <td>   0.126</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.465</td> <th>  Cond. No.          </th> <td>    1.00</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                      y   R-squared:                       0.246\n",
       "Model:                            OLS   Adj. R-squared:                  0.229\n",
       "Method:                 Least Squares   F-statistic:                     14.05\n",
       "Date:                Wed, 13 May 2020   Prob (F-statistic):           0.000526\n",
       "Time:                        13:44:26   Log-Likelihood:                -75.884\n",
       "No. Observations:                  45   AIC:                             155.8\n",
       "Df Residuals:                      43   BIC:                             159.4\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=================================================================================\n",
       "                    coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------\n",
       "const             4.8535      0.199     24.360      0.000       4.452       5.255\n",
       "Share foreign    -0.7469      0.199     -3.749      0.001      -1.149      -0.345\n",
       "==============================================================================\n",
       "Omnibus:                        4.151   Durbin-Watson:                   1.921\n",
       "Prob(Omnibus):                  0.126   Jarque-Bera (JB):                4.147\n",
       "Skew:                          -0.128   Prob(JB):                        0.126\n",
       "Kurtosis:                       4.465   Cond. No.                         1.00\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Model with just share of students with foreign background\n",
    "\n",
    "# drop NaNs\n",
    "df = data.dropna()\n",
    "\n",
    "# standardize X and add constant\n",
    "X1=df[['Share foreign']]\n",
    "X1=preprocessing.scale(X1)\n",
    "X1=pd.DataFrame.from_records(X1) # this ensures that it keeps the var-names\n",
    "X1.columns=['Share foreign'] # this ensures that it keeps the var-names\n",
    "X1=sm.add_constant(X1) \n",
    "\n",
    "y = df[\"Performance\"].values # .values removes the index, so they are aligned\n",
    "\n",
    "# estimate model \n",
    "model1 = sm.OLS(y, X1).fit() \n",
    "predictions1 = model1.predict(X1)\n",
    "\n",
    "# Print out the statistics\n",
    "model1.summary()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "### Model 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>            <td>y</td>        <th>  R-squared:         </th> <td>   0.261</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.207</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   4.836</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 13 May 2020</td> <th>  Prob (F-statistic):</th>  <td>0.00567</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:44:26</td>     <th>  Log-Likelihood:    </th> <td> -75.429</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    45</td>      <th>  AIC:               </th> <td>   158.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    41</td>      <th>  BIC:               </th> <td>   166.1</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     3</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>              <td>    4.8535</td> <td>    0.202</td> <td>   24.028</td> <td> 0.000</td> <td>    4.446</td> <td>    5.261</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Share foreign</th>      <td>   -0.7989</td> <td>    0.213</td> <td>   -3.750</td> <td> 0.001</td> <td>   -1.229</td> <td>   -0.369</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Students</th>           <td>   -0.1890</td> <td>    0.214</td> <td>   -0.884</td> <td> 0.382</td> <td>   -0.621</td> <td>    0.243</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Qualified coverage</th> <td>    0.0164</td> <td>    0.206</td> <td>    0.079</td> <td> 0.937</td> <td>   -0.400</td> <td>    0.433</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 4.542</td> <th>  Durbin-Watson:     </th> <td>   1.920</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.103</td> <th>  Jarque-Bera (JB):  </th> <td>   4.229</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.291</td> <th>  Prob(JB):          </th> <td>   0.121</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 4.385</td> <th>  Cond. No.          </th> <td>    1.42</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                      y   R-squared:                       0.261\n",
       "Model:                            OLS   Adj. R-squared:                  0.207\n",
       "Method:                 Least Squares   F-statistic:                     4.836\n",
       "Date:                Wed, 13 May 2020   Prob (F-statistic):            0.00567\n",
       "Time:                        13:44:26   Log-Likelihood:                -75.429\n",
       "No. Observations:                  45   AIC:                             158.9\n",
       "Df Residuals:                      41   BIC:                             166.1\n",
       "Df Model:                           3                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "======================================================================================\n",
       "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------\n",
       "const                  4.8535      0.202     24.028      0.000       4.446       5.261\n",
       "Share foreign         -0.7989      0.213     -3.750      0.001      -1.229      -0.369\n",
       "Students              -0.1890      0.214     -0.884      0.382      -0.621       0.243\n",
       "Qualified coverage     0.0164      0.206      0.079      0.937      -0.400       0.433\n",
       "==============================================================================\n",
       "Omnibus:                        4.542   Durbin-Watson:                   1.920\n",
       "Prob(Omnibus):                  0.103   Jarque-Bera (JB):                4.229\n",
       "Skew:                          -0.291   Prob(JB):                        0.121\n",
       "Kurtosis:                       4.385   Cond. No.                         1.42\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "## Now with independent variables added on institutional level ## \n",
    "\n",
    "# drop NaNs\n",
    "df = data.dropna()\n",
    "\n",
    "# standardize X and add constant\n",
    "X2=df[['Share foreign','Students','Qualified coverage']]\n",
    "X2=preprocessing.scale(X2)\n",
    "X2=pd.DataFrame.from_records(X2) # this ensures that it keeps the var-names\n",
    "X2.columns=['Share foreign','Students','Qualified coverage'] # this ensures that it keeps the var-names\n",
    "X2=sm.add_constant(X2) \n",
    "\n",
    "y = df[\"Performance\"].values # .values removes the index, so they are aligned\n",
    "\n",
    "# estimate model \n",
    "model2 = sm.OLS(y, X2).fit() \n",
    "predictions2 = model2.predict(X2)\n",
    "\n",
    "# Print out the statistics\n",
    "model2.summary()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>            <td>y</td>        <th>  R-squared:         </th> <td>   0.404</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.310</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   4.299</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 13 May 2020</td> <th>  Prob (F-statistic):</th>  <td>0.00211</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>13:44:26</td>     <th>  Log-Likelihood:    </th> <td> -70.589</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    45</td>      <th>  AIC:               </th> <td>   155.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    38</td>      <th>  BIC:               </th> <td>   167.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "            <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                <td>    4.8535</td> <td>    0.188</td> <td>   25.759</td> <td> 0.000</td> <td>    4.472</td> <td>    5.235</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Share foreign</th>        <td>    0.7200</td> <td>    0.667</td> <td>    1.080</td> <td> 0.287</td> <td>   -0.629</td> <td>    2.069</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Students</th>             <td>   -0.1673</td> <td>    0.214</td> <td>   -0.783</td> <td> 0.439</td> <td>   -0.600</td> <td>    0.265</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Qualified coverage</th>   <td>    0.0986</td> <td>    0.197</td> <td>    0.501</td> <td> 0.619</td> <td>   -0.300</td> <td>    0.497</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Unemployment rate</th>    <td>    0.0288</td> <td>    0.215</td> <td>    0.134</td> <td> 0.894</td> <td>   -0.407</td> <td>    0.464</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Avg household income</th> <td>    0.5697</td> <td>    0.260</td> <td>    2.190</td> <td> 0.035</td> <td>    0.043</td> <td>    1.096</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Education score</th>      <td>    1.2020</td> <td>    0.643</td> <td>    1.869</td> <td> 0.069</td> <td>   -0.100</td> <td>    2.504</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.399</td> <th>  Durbin-Watson:     </th> <td>   2.249</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.497</td> <th>  Jarque-Bera (JB):  </th> <td>   0.589</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.030</td> <th>  Prob(JB):          </th> <td>   0.745</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.557</td> <th>  Cond. No.          </th> <td>    7.78</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                      y   R-squared:                       0.404\n",
       "Model:                            OLS   Adj. R-squared:                  0.310\n",
       "Method:                 Least Squares   F-statistic:                     4.299\n",
       "Date:                Wed, 13 May 2020   Prob (F-statistic):            0.00211\n",
       "Time:                        13:44:26   Log-Likelihood:                -70.589\n",
       "No. Observations:                  45   AIC:                             155.2\n",
       "Df Residuals:                      38   BIC:                             167.8\n",
       "Df Model:                           6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================\n",
       "                           coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------------\n",
       "const                    4.8535      0.188     25.759      0.000       4.472       5.235\n",
       "Share foreign            0.7200      0.667      1.080      0.287      -0.629       2.069\n",
       "Students                -0.1673      0.214     -0.783      0.439      -0.600       0.265\n",
       "Qualified coverage       0.0986      0.197      0.501      0.619      -0.300       0.497\n",
       "Unemployment rate        0.0288      0.215      0.134      0.894      -0.407       0.464\n",
       "Avg household income     0.5697      0.260      2.190      0.035       0.043       1.096\n",
       "Education score          1.2020      0.643      1.869      0.069      -0.100       2.504\n",
       "==============================================================================\n",
       "Omnibus:                        1.399   Durbin-Watson:                   2.249\n",
       "Prob(Omnibus):                  0.497   Jarque-Bera (JB):                0.589\n",
       "Skew:                          -0.030   Prob(JB):                        0.745\n",
       "Kurtosis:                       3.557   Cond. No.                         7.78\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Now with independent variables added on socio-economic level ## \n",
    "\n",
    "# drop NaNs\n",
    "df = data.dropna()\n",
    "\n",
    "# standardize X and add constant\n",
    "X3=df[['Share foreign',\n",
    "      'Students',\n",
    "      'Qualified coverage','Unemployment rate','Avg household income',\n",
    "      'Education score']]\n",
    "X3=preprocessing.scale(X3)\n",
    "X3=pd.DataFrame.from_records(X3) # this ensures that it keeps the var-names\n",
    "X3.columns=['Share foreign',\n",
    "           'Students',\n",
    "           'Qualified coverage','Unemployment rate','Avg household income',\n",
    "           'Education score'] # this ensures that it keeps the var-names\n",
    "X3=sm.add_constant(X3) \n",
    "\n",
    "y = df[\"Performance\"].values # .values removes the index, so they are aligned\n",
    "\n",
    "# estimate model \n",
    "model3 = sm.OLS(y, X3).fit() \n",
    "predictions3 = model3.predict(X3)\n",
    "\n",
    "# Print out the statistics\n",
    "model3.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create data for plot #1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var</th>\n",
       "      <th>coeff</th>\n",
       "      <th>mod</th>\n",
       "      <th>err</th>\n",
       "      <th>idx</th>\n",
       "      <th>idxh</th>\n",
       "      <th>idxl</th>\n",
       "      <th>low</th>\n",
       "      <th>high</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Share foreign3</td>\n",
       "      <td>0.719997</td>\n",
       "      <td>mod3</td>\n",
       "      <td>2.698937</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.45</td>\n",
       "      <td>-0.629471</td>\n",
       "      <td>2.069466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Share foreign2</td>\n",
       "      <td>-0.798886</td>\n",
       "      <td>mod2</td>\n",
       "      <td>0.860551</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.45</td>\n",
       "      <td>-1.229161</td>\n",
       "      <td>-0.368610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Share foreign1</td>\n",
       "      <td>-0.746877</td>\n",
       "      <td>mod1</td>\n",
       "      <td>0.803620</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.55</td>\n",
       "      <td>2.45</td>\n",
       "      <td>-1.148687</td>\n",
       "      <td>-0.345067</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              var     coeff   mod       err  idx  idxh  idxl       low  \\\n",
       "0  Share foreign3  0.719997  mod3  2.698937  0.5  0.55  0.45 -0.629471   \n",
       "1  Share foreign2 -0.798886  mod2  0.860551  1.5  1.55  1.45 -1.229161   \n",
       "2  Share foreign1 -0.746877  mod1  0.803620  2.5  2.55  2.45 -1.148687   \n",
       "\n",
       "       high  \n",
       "0  2.069466  \n",
       "1 -0.368610  \n",
       "2 -0.345067  "
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# plug in the relevant information from the model output that is needed to create the plot\n",
    "\n",
    "# var: name of the variable\n",
    "# coeff: coefficient of the variable\n",
    "# mod: declaring which model it is (1,2,3)\n",
    "# err: the width of the whiskers (95-pct. confidence interval)\n",
    "# idx: controls where the bar is placed on the y-axis\n",
    "# idxh: controls the top of the vertical ends of the whiskers\n",
    "# idxl: controls the bottom of the vertical ends of the whiskers\n",
    "# low: lowest end of the 95-pct. confidence interval\n",
    "# high: highest end of the 95-pct. confidence interval\n",
    "\n",
    "\n",
    "data = [[X3.columns[1]+'3',model3.params[1],'mod3',abs(model3.conf_int().values[1][0]-model3.conf_int().values[1][1]),0.5,0.55,0.45,model3.conf_int().values[1][0],model3.conf_int().values[1][1]],\n",
    "        [X2.columns[1]+'2',model2.params[1],'mod2',abs(model2.conf_int().values[1][0]-model2.conf_int().values[1][1]),1.5,1.55,1.45,model2.conf_int().values[1][0],model2.conf_int().values[1][1]],\n",
    "        [X1.columns[1]+'1',model1.params[1],'mod1',abs(model1.conf_int().values[1][0]-model1.conf_int().values[1][1]),2.5,2.55,2.45,model1.conf_int().values[1][0],model1.conf_int().values[1][1]]]\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "df.columns = ['var','coeff','mod','err','idx','idxh','idxl','low','high'] \n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['#3288bd', '#99d594', '#e6f598', '#fee08b', '#fc8d59', '#d53e4f']"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Spectral6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot #1 with change in share of foreign students"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "### TAB 1 ###\n",
    "\n",
    "plot1 = figure(title='Coefficients of share of students with foreign background',\n",
    "          x_axis_label='Coefficient', # name of x-axis\n",
    "          y_axis_label='Variable', #name of y-axis #fjern ) + #\n",
    "          y_range=df['var'],\n",
    "          x_range=(-2.25,2.25))# plotting on var axis # udkommenter for var-akse på idx plot\n",
    "\n",
    "#x_range.set({\"start\": -1, \"end\": 1})\n",
    "    \n",
    "models1=[df[(df['mod']=='mod1')&(df['var']==X1.columns[1]+'1')]]\n",
    "\n",
    "names1=['Model 1']\n",
    "\n",
    "colors1=['#3288bd']\n",
    "\n",
    "for model, name, color in zip(models1,names1,colors1):\n",
    "    \n",
    "    dfp=model    \n",
    "        \n",
    "    plot1.rect('coeff', # plotting idx data\n",
    "              'idx',\n",
    "              width='err', \n",
    "              height=0.005,\n",
    "              color=color,\n",
    "              legend=name,\n",
    "              source=dfp)\n",
    "    \n",
    "    plot1.circle('coeff', # plotting idx data\n",
    "              'idx',\n",
    "              color=color,\n",
    "              size=12,\n",
    "              legend=name,\n",
    "              source=dfp)\n",
    "    \n",
    "    plot1.segment(x0='low', # til det sidste på de hjemmelavede whiskers.\n",
    "                 y0='idxl',\n",
    "                 x1='low',\n",
    "                 y1='idxh', \n",
    "                 color=color,\n",
    "                 legend=name,\n",
    "                 line_width=2,\n",
    "                 source=dfp)\n",
    "    \n",
    "    plot1.segment(x0='high', # til det sidste på de hjemmelavede whiskers.\n",
    "                 y0='idxl',\n",
    "                 x1='high',\n",
    "                 y1='idxh', \n",
    "                 color=color,\n",
    "                 legend=name,\n",
    "                 line_width=2,\n",
    "                 source=dfp)\n",
    "\n",
    "# add annotation (citations)\n",
    "\n",
    "citation = Label(x=240, y=380, x_units='screen', y_units='screen',\n",
    "                 text='In Model 1, share foreign is significant.', render_mode='css',\n",
    "                 border_line_color='black', border_line_alpha=1.0,\n",
    "                 background_fill_color='white', background_fill_alpha=10.0, text_font_size='7.4pt')\n",
    "\n",
    "plot1.add_layout(citation)\n",
    "\n",
    "\n",
    "# add arrows\n",
    "plot1.add_layout(Arrow(end=NormalHead(size=10,fill_color=\"black\"),\n",
    "                   x_start=0.2, y_start=2.2, x_end=-0.60, y_end=2.45))\n",
    "    \n",
    "\n",
    "    \n",
    "# add horizontal line\n",
    "vline = Span(location=0, dimension='height', line_color='black', line_width=2)\n",
    "plot1.renderers.extend([vline])\n",
    "\n",
    "# add tooltips + add var name permanently on! \n",
    "hover = HoverTool(tooltips=[('Variable', '@var'),('Coefficient', '@coeff')])\n",
    "plot1.add_tools(hover)\n",
    "\n",
    "plot1.legend.location = \"top_right\"\n",
    "\n",
    "tab1 = Panel(child=plot1, title=\"Ethnicity\") \n",
    "\n",
    "\n",
    "### TAB 2 ###\n",
    "\n",
    "plot2 = figure(title='Coefficients of share of students with foreign background',\n",
    "          x_axis_label='Coefficient', # name of x-axis\n",
    "          y_axis_label='Variable', #name of y-axis \n",
    "          y_range=df['var'],\n",
    "          x_range=(-2.25,2.25))\n",
    "\n",
    "\n",
    "models2=[df[(df['mod']=='mod1')&(df['var']==X1.columns[1]+'1')],\n",
    "        df[(df['mod']=='mod2')&(df['var']==X2.columns[1]+'2')]]\n",
    "\n",
    "names2=['Model 1', 'Model 2']\n",
    "\n",
    "colors2=['#3288bd','#fc8d59']\n",
    "\n",
    "for model, name, color in zip(models2,names2,colors2):\n",
    "    \n",
    "    dfp=model    \n",
    "        \n",
    "    plot2.rect('coeff',\n",
    "              'idx',\n",
    "              width='err', \n",
    "              height=0.005,\n",
    "              color=color,\n",
    "              legend=name,\n",
    "              source=dfp)\n",
    "    \n",
    "    plot2.circle('coeff', \n",
    "              'idx',\n",
    "              color=color,\n",
    "              size=12,\n",
    "              legend=name,\n",
    "              source=dfp)\n",
    "    \n",
    "    plot2.segment(x0='low', \n",
    "                 y0='idxl',\n",
    "                 x1='low',\n",
    "                 y1='idxh', \n",
    "                 color=color,\n",
    "                 legend=name,\n",
    "                 line_width=2,\n",
    "                 source=dfp)\n",
    "    \n",
    "    plot2.segment(x0='high', \n",
    "                 y0='idxl',\n",
    "                 x1='high',\n",
    "                 y1='idxh', \n",
    "                 color=color,\n",
    "                 legend=name,\n",
    "                 line_width=2,\n",
    "                 source=dfp)\n",
    "\n",
    "\n",
    "    \n",
    "# add annotation (citations)\n",
    "\n",
    "citation = Label(x=60, y=360, x_units='screen', y_units='screen',\n",
    "                 text='In Model 2, there is no change.', render_mode='css',\n",
    "                 border_line_color='black', border_line_alpha=1.0,\n",
    "                 background_fill_color='white', background_fill_alpha=10.0, text_font_size='7.4pt')\n",
    "\n",
    "plot2.add_layout(citation)\n",
    "\n",
    "\n",
    "# add arrows\n",
    "plot2.add_layout(Arrow(end=NormalHead(size=10,fill_color=\"black\"),\n",
    "                   x_start=-0.9, y_start=2.1, x_end=-0.82, y_end=1.6))    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "# add horizontal line\n",
    "vline = Span(location=0, dimension='height', line_color='black', line_width=2)\n",
    "plot2.renderers.extend([vline])\n",
    "\n",
    "# add tooltips \n",
    "hover = HoverTool(tooltips=[('Variable', '@var'),('Coefficient', '@coeff')])\n",
    "plot2.add_tools(hover)\n",
    "\n",
    "plot2.legend.location = \"top_right\"\n",
    "\n",
    "tab2 = Panel(child=plot2, title=\"Ethnicity + Institutional\") \n",
    "\n",
    "\n",
    "### TAB 3 ###\n",
    "\n",
    "plot3 = figure(title='Coefficients of share of students with foreign background',\n",
    "          x_axis_label='Coefficient', # name of x-axis\n",
    "          y_axis_label='Variable', #name of y-axis #fjern ) + #\n",
    "          y_range=df['var'],\n",
    "          x_range=(-2.25,2.25))# plotting on var axis # udkommenter for var-akse på idx plot\n",
    "\n",
    "\n",
    "models3=[df[(df['mod']=='mod1')&(df['var']==X1.columns[1]+'1')],\n",
    "        df[(df['mod']=='mod2')&(df['var']==X2.columns[1]+'2')],\n",
    "        df[(df['mod']=='mod3')&(df['var']==X3.columns[1]+'3')]]\n",
    "\n",
    "names3=['Model 1', 'Model 2', 'Model 3']\n",
    "\n",
    "colors3=['#3288bd','#fc8d59','#99d594']\n",
    "\n",
    "for model, name, color in zip(models3,names3,colors3):\n",
    "    \n",
    "    dfp=model    \n",
    "        \n",
    "    plot3.rect('coeff', # plotting idx data\n",
    "              'idx',\n",
    "              width='err', \n",
    "              height=0.005,\n",
    "              color=color,\n",
    "              legend=name,\n",
    "              source=dfp)\n",
    "    \n",
    "    \n",
    "    plot3.circle('coeff', # plotting idx data\n",
    "              'idx',\n",
    "              color=color,\n",
    "              size=12,\n",
    "              legend=name,\n",
    "              source=dfp)\n",
    "    \n",
    "    plot3.segment(x0='low', # til det sidste på de hjemmelavede whiskers.\n",
    "                 y0='idxl',\n",
    "                 x1='low',\n",
    "                 y1='idxh', \n",
    "                 color=color,\n",
    "                 legend=name,\n",
    "                 line_width=2,\n",
    "                 source=dfp)\n",
    "    \n",
    "    plot3.segment(x0='high', # til det sidste på de hjemmelavede whiskers.\n",
    "                 y0='idxl',\n",
    "                 x1='high',\n",
    "                 y1='idxh', \n",
    "                 color=color,\n",
    "                 legend=name,\n",
    "                 line_width=2,\n",
    "                 source=dfp)\n",
    "\n",
    "    \n",
    "\n",
    "# add annotation (citations)\n",
    "\n",
    "citation = Label(x=15, y=140, x_units='screen', y_units='screen',\n",
    "                 text='In Model 3, share foreign becomes insignificant.', render_mode='css',\n",
    "                 border_line_color='black', border_line_alpha=1.0,\n",
    "                 background_fill_color='white', background_fill_alpha=10.0, text_font_size='7.4pt')\n",
    "\n",
    "plot3.add_layout(citation)\n",
    "\n",
    "\n",
    "# add arrows\n",
    "plot3.add_layout(Arrow(end=NormalHead(size=10,fill_color=\"black\"),\n",
    "                   x_start=-0.2, y_start=0.83, x_end=0.60, y_end=0.55))\n",
    "\n",
    "    \n",
    "# add horizontal line\n",
    "vline = Span(location=0, dimension='height', line_color='black', line_width=2)\n",
    "plot3.renderers.extend([vline])\n",
    "\n",
    "# add tooltips + add var name permanently on! \n",
    "hover = HoverTool(tooltips=[('Variable', '@var'),('Coefficient', '@coeff')])\n",
    "plot3.add_tools(hover)\n",
    "\n",
    "plot3.legend.location = \"top_right\"\n",
    "\n",
    "tab3 = Panel(child=plot3, title=\"Ethnicity + Institutional + Socio-economic\")    \n",
    "\n",
    "\n",
    "\n",
    "# collect all the tabs\n",
    "tabs = Tabs(tabs=[ tab1, tab2 ,tab3 ])\n",
    "\n",
    "# create and save HTML\n",
    "htmlDAN1 = file_html(tabs, CDN, \"my plot\")\n",
    "htmlDAN1=output_file('htmlDAN1.html')\n",
    "\n",
    "show(tabs)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create data for plot #2\n",
    "\n",
    "Now we want to let the reader dive into the coefficients of all the variable that were included in model 3, and allow them to explore what variables actually do impact the performance of the schools."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var</th>\n",
       "      <th>coeff</th>\n",
       "      <th>mod</th>\n",
       "      <th>err</th>\n",
       "      <th>idx</th>\n",
       "      <th>idxh</th>\n",
       "      <th>idxl</th>\n",
       "      <th>low</th>\n",
       "      <th>high</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Education score</td>\n",
       "      <td>1.202037</td>\n",
       "      <td>mod2</td>\n",
       "      <td>2.604014</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.45</td>\n",
       "      <td>-0.099970</td>\n",
       "      <td>2.504044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Avg household income</td>\n",
       "      <td>0.569685</td>\n",
       "      <td>mod2</td>\n",
       "      <td>1.053359</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.45</td>\n",
       "      <td>0.043005</td>\n",
       "      <td>1.096364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Unemployment rate</td>\n",
       "      <td>0.028840</td>\n",
       "      <td>mod2</td>\n",
       "      <td>0.870872</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.55</td>\n",
       "      <td>2.45</td>\n",
       "      <td>-0.406596</td>\n",
       "      <td>0.464276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Qualified coverage</td>\n",
       "      <td>0.098604</td>\n",
       "      <td>mod2</td>\n",
       "      <td>0.796363</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.55</td>\n",
       "      <td>3.45</td>\n",
       "      <td>-0.299577</td>\n",
       "      <td>0.496786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Students</td>\n",
       "      <td>-0.167288</td>\n",
       "      <td>mod2</td>\n",
       "      <td>0.865129</td>\n",
       "      <td>4.5</td>\n",
       "      <td>4.55</td>\n",
       "      <td>4.45</td>\n",
       "      <td>-0.599852</td>\n",
       "      <td>0.265277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Share foreign</td>\n",
       "      <td>0.719997</td>\n",
       "      <td>mod1</td>\n",
       "      <td>2.698937</td>\n",
       "      <td>5.5</td>\n",
       "      <td>5.55</td>\n",
       "      <td>5.45</td>\n",
       "      <td>-0.629471</td>\n",
       "      <td>2.069466</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    var     coeff   mod       err  idx  idxh  idxl       low  \\\n",
       "0       Education score  1.202037  mod2  2.604014  0.5  0.55  0.45 -0.099970   \n",
       "1  Avg household income  0.569685  mod2  1.053359  1.5  1.55  1.45  0.043005   \n",
       "2     Unemployment rate  0.028840  mod2  0.870872  2.5  2.55  2.45 -0.406596   \n",
       "3    Qualified coverage  0.098604  mod2  0.796363  3.5  3.55  3.45 -0.299577   \n",
       "4              Students -0.167288  mod2  0.865129  4.5  4.55  4.45 -0.599852   \n",
       "5         Share foreign  0.719997  mod1  2.698937  5.5  5.55  5.45 -0.629471   \n",
       "\n",
       "       high  \n",
       "0  2.504044  \n",
       "1  1.096364  \n",
       "2  0.464276  \n",
       "3  0.496786  \n",
       "4  0.265277  \n",
       "5  2.069466  "
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Same procedure as for plot #1\n",
    "\n",
    "\n",
    "data = [[X3.columns[6],model3.params[6],'mod2',abs(model3.conf_int().values[6][0]-model3.conf_int().values[6][1]),0.5,0.55,0.45,model3.conf_int().values[6][0],model3.conf_int().values[6][1]],\n",
    "        [X3.columns[5],model3.params[5],'mod2',abs(model3.conf_int().values[5][0]-model3.conf_int().values[5][1]),1.5,1.55,1.45,model3.conf_int().values[5][0],model3.conf_int().values[5][1]],\n",
    "        [X3.columns[4],model3.params[4],'mod2',abs(model3.conf_int().values[4][0]-model3.conf_int().values[4][1]),2.5,2.55,2.45,model3.conf_int().values[4][0],model3.conf_int().values[4][1]],\n",
    "        [X3.columns[3],model3.params[3],'mod2',abs(model3.conf_int().values[3][0]-model3.conf_int().values[3][1]),3.5,3.55,3.45,model3.conf_int().values[3][0],model3.conf_int().values[3][1]],\n",
    "        [X3.columns[2],model3.params[2],'mod2',abs(model3.conf_int().values[2][0]-model3.conf_int().values[2][1]),4.5,4.55,4.45,model3.conf_int().values[2][0],model3.conf_int().values[2][1]],\n",
    "        [X3.columns[1],model3.params[1],'mod1',abs(model3.conf_int().values[1][0]-model3.conf_int().values[1][1]),5.5,5.55,5.45,model3.conf_int().values[1][0],model3.conf_int().values[1][1]]]\n",
    "\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "df.columns = ['var','coeff','mod','err','idx','idxh','idxl','low','high']\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot #2 (all coefficients from Model 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bokeh.models import ColumnDataSource, Label, LabelSet, Range1d\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Arrow, NormalHead, OpenHead, VeeHead\n",
    "\n",
    "source = ColumnDataSource(df)\n",
    "\n",
    "plot = figure(title='Coefficients of Model 3 (Ethnicity + Institutional + Socio-economic)',\n",
    "          x_axis_label='Coefficient', # name of x-axis\n",
    "          y_axis_label='Variable', #name of y-axis #fjern ) + #\n",
    "          y_range=df['var'],\n",
    "          x_range=(-2.75,2.75))# plotting on var axis # udkommenter for var-akse på idx plot\n",
    "\n",
    "plot.rect('coeff', # plotting idx data\n",
    "          'idx',\n",
    "          width='err', \n",
    "          height=0.005,\n",
    "          color='#99d594',\n",
    "          source=source)\n",
    "\n",
    "\n",
    "plot.circle('coeff', # plotting idx data\n",
    "              'idx',\n",
    "              size=10,\n",
    "              color='#99d594',\n",
    "              source=source)\n",
    "\n",
    "plot.segment(x0='low', # til det sidste på de hjemmelavede whiskers.\n",
    "                 y0='idxl',\n",
    "                 x1='low',\n",
    "                 y1='idxh', \n",
    "                 line_width=2,\n",
    "                 color='#99d594',\n",
    "                 source=source)\n",
    "    \n",
    "plot.segment(x0='high', # til det sidste på de hjemmelavede whiskers.\n",
    "                 y0='idxl',\n",
    "                 x1='high',\n",
    "                 y1='idxh', \n",
    "                 line_width=2,\n",
    "                 color='#99d594',\n",
    "                 source=source)\n",
    "\n",
    "# add horizontal line\n",
    "vline = Span(location=0, dimension='height', line_color='black', line_width=2)\n",
    "plot.renderers.extend([vline])\n",
    "\n",
    "# add tooltips \n",
    "hover = HoverTool(tooltips=[('Variable', '@var'),('Coefficient', '@coeff')]) \n",
    "plot.add_tools(hover)\n",
    "\n",
    "# add annotation (citations)\n",
    "\n",
    "citation = Label(x=12, y=160, x_units='screen', y_units='screen',\n",
    "                 text='Only avg. household income is significant.', render_mode='css',\n",
    "                 border_line_color='black', border_line_alpha=1.0,\n",
    "                 background_fill_color='white', background_fill_alpha=10.0, text_font_size='7.4pt')\n",
    "\n",
    "plot.add_layout(citation)\n",
    "\n",
    "citation2 = Label(x=5, y=10, x_units='screen', y_units='screen',\n",
    "                 text='Although education score is pretty close!', render_mode='css',\n",
    "                 border_line_color='black', border_line_alpha=1.0,\n",
    "                 background_fill_color='white', background_fill_alpha=10.0, text_font_size='7.4pt')\n",
    "\n",
    "plot.add_layout(citation2)\n",
    "\n",
    "# add arrows\n",
    "plot.add_layout(Arrow(end=NormalHead(size=10,fill_color=\"black\"),\n",
    "                   x_start=-0.5, y_start=1.9, x_end=0.4, y_end=1.6))\n",
    "\n",
    "plot.add_layout(Arrow(end=NormalHead(size=10,fill_color=\"black\"),\n",
    "                   x_start=-0.45, y_start=0.15, x_end=-0.15, y_end=0.4))\n",
    "\n",
    "# create and save HTML\n",
    "htmlDAN2 = file_html(plot, CDN, \"my plot\")\n",
    "htmlDAN2=output_file('htmlDAN2.html')\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create data for plot #3\n",
    "\n",
    "This plot is created with \"fake\" data as a visual aid in explaining the concept behind linear regression, coefficients, confidence intervals and significance. Basically, it is a toy example that prepares the reader for the real deal. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var</th>\n",
       "      <th>coeff</th>\n",
       "      <th>mod</th>\n",
       "      <th>err</th>\n",
       "      <th>idx</th>\n",
       "      <th>idxh</th>\n",
       "      <th>idxl</th>\n",
       "      <th>low</th>\n",
       "      <th>high</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Books read</td>\n",
       "      <td>-0.103</td>\n",
       "      <td>mod1</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.45</td>\n",
       "      <td>-0.303</td>\n",
       "      <td>0.097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Meetings attended</td>\n",
       "      <td>0.060</td>\n",
       "      <td>mod1</td>\n",
       "      <td>0.60</td>\n",
       "      <td>1.5</td>\n",
       "      <td>1.55</td>\n",
       "      <td>1.45</td>\n",
       "      <td>-0.240</td>\n",
       "      <td>0.360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Portions of fast food</td>\n",
       "      <td>-0.340</td>\n",
       "      <td>mod1</td>\n",
       "      <td>0.24</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2.55</td>\n",
       "      <td>2.45</td>\n",
       "      <td>-0.460</td>\n",
       "      <td>-0.220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hours at the gym</td>\n",
       "      <td>0.540</td>\n",
       "      <td>mod1</td>\n",
       "      <td>0.16</td>\n",
       "      <td>3.5</td>\n",
       "      <td>3.55</td>\n",
       "      <td>3.45</td>\n",
       "      <td>0.460</td>\n",
       "      <td>0.620</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     var  coeff   mod   err  idx  idxh  idxl    low   high\n",
       "0             Books read -0.103  mod1  0.40  0.5  0.55  0.45 -0.303  0.097\n",
       "1      Meetings attended  0.060  mod1  0.60  1.5  1.55  1.45 -0.240  0.360\n",
       "2  Portions of fast food -0.340  mod1  0.24  2.5  2.55  2.45 -0.460 -0.220\n",
       "3       Hours at the gym  0.540  mod1  0.16  3.5  3.55  3.45  0.460  0.620"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Same procedure as for plot #1\n",
    "\n",
    "\n",
    "data = [['Books read',-0.103,'mod1',0.4,0.5,0.55,0.45,-0.303,0.097],\n",
    "        ['Meetings attended',0.06,'mod1',0.6,1.5,1.55,1.45,-0.24,0.36],\n",
    "        ['Portions of fast food',-0.34,'mod1',0.24,2.5,2.55,2.45,-0.46,-0.22],\n",
    "        ['Hours at the gym',0.54,'mod1',0.16,3.5,3.55,3.45,0.46,0.62]]\n",
    "\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "df.columns = ['var','coeff','mod','err','idx','idxh','idxl','low','high']\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot #3 (toy example about weight-loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "source = ColumnDataSource(df)\n",
    "\n",
    "plotF = figure(title='Fake coefficients of a weight-loss model',\n",
    "          x_axis_label='Coefficient', # name of x-axis\n",
    "          y_axis_label='Variable', #name of y-axis #fjern ) + #\n",
    "          y_range=df['var'],\n",
    "          x_range=(-0.75,0.75))# plotting on var axis # udkommenter for var-akse på idx plot\n",
    "\n",
    "plotF.rect('coeff', # plotting idx data\n",
    "          'idx',\n",
    "          width='err', \n",
    "          height=0.005,\n",
    "          color='black',\n",
    "          source=source)\n",
    "\n",
    "\n",
    "plotF.circle('coeff', # plotting idx data\n",
    "              'idx',\n",
    "              size=10,\n",
    "              color='black',\n",
    "              source=source)\n",
    "\n",
    "plotF.segment(x0='low', # til det sidste på de hjemmelavede whiskers.\n",
    "                 y0='idxl',\n",
    "                 x1='low',\n",
    "                 y1='idxh', \n",
    "                 line_width=2,\n",
    "                 color='black',\n",
    "                 source=source)\n",
    "    \n",
    "plotF.segment(x0='high', # til det sidste på de hjemmelavede whiskers.\n",
    "                 y0='idxl',\n",
    "                 x1='high',\n",
    "                 y1='idxh', \n",
    "                 line_width=2,\n",
    "                 color='black',\n",
    "                 source=source)\n",
    "\n",
    "# add horizontal line\n",
    "vline = Span(location=0, dimension='height', line_color='black', line_width=2)\n",
    "plotF.renderers.extend([vline])\n",
    "\n",
    "# add tooltips\n",
    "hover = HoverTool(tooltips=[('Variable', '@var'),('Coefficient', '@coeff')]) \n",
    "plotF.add_tools(hover)\n",
    "\n",
    "# create and save HTML\n",
    "htmlDAN3 = file_html(plotF, CDN, \"my plot\")\n",
    "htmlDAN3=output_file('htmlDAN3.html')\n",
    "\n",
    "show(plotF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
